require "tinyg/node"

module TinyG
  module Nodes
    class Node
      include Enumerable

<%- nodes.each do |node| -%>
      def <%= node.human_name %>? = false
<%- end -%>
      def each(&blk)
        yield self
        children.each { _1.each(&blk) }
      end
    end

<%- nodes.each do |node| -%>
    class <%= node.name %> < <%= node.parent ? node.parent : "Node" %>
      <%- if node.fields.any? -%>
      attr_reader <%= node.fields.map { ":" + _1.name }.join(", ") %>

      def initialize <%= node.fields.map(&:name).join(", ") %>
        <%- node.fields.each do |field| -%>
        @<%= field.name %> = <%= field.name %>
        <%- end -%>
      end
      <%- end -%>

      def accept viz
        viz.handle_<%= node.human_name %> self
      end

      def <%= node.human_name %>? = true

      <%- if node.has_children? -%>
      def children
        <%= node.children %>
      end
      <%- end -%>
    end
<%- end -%>
  end
end
